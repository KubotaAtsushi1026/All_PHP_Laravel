{"filter":false,"title":"AuthenticatesUsers.php","tooltip":"/instagram/vendor/laravel/framework/src/Illuminate/Foundation/Auth/AuthenticatesUsers.php","undoManager":{"mark":1,"position":1,"stack":[[{"start":{"row":0,"column":0},"end":{"row":185,"column":0},"action":"remove","lines":["<?php","","namespace Illuminate\\Foundation\\Auth;","","use Illuminate\\Http\\Request;","use Illuminate\\Support\\Facades\\Auth;","use Illuminate\\Validation\\ValidationException;","","trait AuthenticatesUsers","{","    use RedirectsUsers, ThrottlesLogins;","","    /**","     * Show the application's login form.","     *","     * @return \\Illuminate\\Http\\Response","     */","    public function showLoginForm()","    {","        return view('auth.login');","    }","","    /**","     * Handle a login request to the application.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return \\Illuminate\\Http\\RedirectResponse|\\Illuminate\\Http\\Response|\\Illuminate\\Http\\JsonResponse","     *","     * @throws \\Illuminate\\Validation\\ValidationException","     */","    public function login(Request $request)","    {","        $this->validateLogin($request);","","        // If the class is using the ThrottlesLogins trait, we can automatically throttle","        // the login attempts for this application. We'll key this by the username and","        // the IP address of the client making these requests into this application.","        if (method_exists($this, 'hasTooManyLoginAttempts') &&","            $this->hasTooManyLoginAttempts($request)) {","            $this->fireLockoutEvent($request);","","            return $this->sendLockoutResponse($request);","        }","","        if ($this->attemptLogin($request)) {","            return $this->sendLoginResponse($request);","        }","","        // If the login attempt was unsuccessful we will increment the number of attempts","        // to login and redirect the user back to the login form. Of course, when this","        // user surpasses their maximum number of attempts they will get locked out.","        $this->incrementLoginAttempts($request);","","        return $this->sendFailedLoginResponse($request);","    }","","    /**","     * Validate the user login request.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return void","     *","     * @throws \\Illuminate\\Validation\\ValidationException","     */","    protected function validateLogin(Request $request)","    {","        $request->validate([","            $this->username() => 'required|string',","            'password' => 'required|string',","        ]);","    }","","    /**","     * Attempt to log the user into the application.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return bool","     */","    protected function attemptLogin(Request $request)","    {","        return $this->guard()->attempt(","            $this->credentials($request), $request->filled('remember')","        );","    }","","    /**","     * Get the needed authorization credentials from the request.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return array","     */","    protected function credentials(Request $request)","    {","        return $request->only($this->username(), 'password');","    }","","    /**","     * Send the response after the user was authenticated.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return \\Illuminate\\Http\\Response","     */","    protected function sendLoginResponse(Request $request)","    {","        $request->session()->regenerate();","","        $this->clearLoginAttempts($request);","","        return $this->authenticated($request, $this->guard()->user())","                ?: redirect()->intended($this->redirectPath());","    }","","    /**","     * The user has been authenticated.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @param  mixed  $user","     * @return mixed","     */","    protected function authenticated(Request $request, $user)","    {","        //","    }","","    /**","     * Get the failed login response instance.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return \\Symfony\\Component\\HttpFoundation\\Response","     *","     * @throws \\Illuminate\\Validation\\ValidationException","     */","    protected function sendFailedLoginResponse(Request $request)","    {","        throw ValidationException::withMessages([","            $this->username() => [trans('auth.failed')],","        ]);","    }","","    /**","     * Get the login username to be used by the controller.","     *","     * @return string","     */","    public function username()","    {","        return 'email';","    }","","    /**","     * Log the user out of the application.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return \\Illuminate\\Http\\Response","     */","    public function logout(Request $request)","    {","        $this->guard()->logout();","","        $request->session()->invalidate();","","        return $this->loggedOut($request) ?: redirect('/');","    }","","    /**","     * The user has logged out of the application.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return mixed","     */","    protected function loggedOut(Request $request)","    {","        //","    }","","    /**","     * Get the guard to be used during authentication.","     *","     * @return \\Illuminate\\Contracts\\Auth\\StatefulGuard","     */","    protected function guard()","    {","        return Auth::guard();","    }","}",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":184,"column":1},"action":"insert","lines":["# <?php","","namespace Illuminate\\Foundation\\Auth;","","use Illuminate\\Http\\Request;","use Illuminate\\Support\\Facades\\Auth;","use Illuminate\\Validation\\ValidationException;","","trait AuthenticatesUsers","{","    use RedirectsUsers, ThrottlesLogins;","","    /**","     * Show the application's login form.","     *","     * @return \\Illuminate\\Http\\Response","     */","    public function showLoginForm()","    {","        return view('auth.login');","    }","","    /**","     * Handle a login request to the application.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return \\Illuminate\\Http\\RedirectResponse|\\Illuminate\\Http\\Response|\\Illuminate\\Http\\JsonResponse","     *","     * @throws \\Illuminate\\Validation\\ValidationException","     */","    public function login(Request $request)","    {","        $this->validateLogin($request);","","        // If the class is using the ThrottlesLogins trait, we can automatically throttle","        // the login attempts for this application. We'll key this by the username and","        // the IP address of the client making these requests into this application.","        if (method_exists($this, 'hasTooManyLoginAttempts') &&","            $this->hasTooManyLoginAttempts($request)) {","            $this->fireLockoutEvent($request);","","            return $this->sendLockoutResponse($request);","        }","","        if ($this->attemptLogin($request)) {","            return $this->sendLoginResponse($request);","        }","","        // If the login attempt was unsuccessful we will increment the number of attempts","        // to login and redirect the user back to the login form. Of course, when this","        // user surpasses their maximum number of attempts they will get locked out.","        $this->incrementLoginAttempts($request);","","        return $this->sendFailedLoginResponse($request);","    }","","    /**","     * Validate the user login request.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return void","     *","     * @throws \\Illuminate\\Validation\\ValidationException","     */","    protected function validateLogin(Request $request)","    {","        $request->validate([","            $this->username() => 'required|string',","            'password' => 'required|string',","        ]);","    }","","    /**","     * Attempt to log the user into the application.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return bool","     */","    protected function attemptLogin(Request $request)","    {","        return $this->guard()->attempt(","            $this->credentials($request), $request->filled('remember')","        );","    }","","    /**","     * Get the needed authorization credentials from the request.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return array","     */","    protected function credentials(Request $request)","    {","        return $request->only($this->username(), 'password');","    }","","    /**","     * Send the response after the user was authenticated.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return \\Illuminate\\Http\\Response","     */","    protected function sendLoginResponse(Request $request)","    {","        $request->session()->regenerate();","","        $this->clearLoginAttempts($request);","","        return $this->authenticated($request, $this->guard()->user())","                ?: redirect()->intended($this->redirectPath());","    }","","    /**","     * The user has been authenticated.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @param  mixed  $user","     * @return mixed","     */","    protected function authenticated(Request $request, $user)","    {","        //","    }","","    /**","     * Get the failed login response instance.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return \\Symfony\\Component\\HttpFoundation\\Response","     *","     * @throws \\Illuminate\\Validation\\ValidationException","     */","    protected function sendFailedLoginResponse(Request $request)","    {","        throw ValidationException::withMessages([","            $this->username() => [trans('auth.failed')],","        ]);","    }","","    /**","     * Get the login username to be used by the controller.","     *","     * @return string","     */","    public function username()","    {","        return 'email';","    }","","    /**","     * Log the user out of the application.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return \\Illuminate\\Http\\Response","     */","    public function logout(Request $request)","    {","        $this->guard()->logout();","","        $request->session()->invalidate();","","        return $this->loggedOut($request) ?: redirect('/');","    }","","    /**","     * The user has logged out of the application.","     *","     * @param  \\Illuminate\\Http\\Request  $request","     * @return mixed","     */","    protected function loggedOut(Request $request)","    {","        //","    }","","    /**","     * Get the guard to be used during authentication.","     *","     * @return \\Illuminate\\Contracts\\Auth\\StatefulGuard","     */","    protected function guard()","    {","        return Auth::guard();","    }","}"]}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":[" "],"id":3},{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["#"]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":20,"state":"php-start","mode":"ace/mode/php"}},"timestamp":1645612408944,"hash":"395bf552ef3cda014bf7789c51cee6daf67621fc"}